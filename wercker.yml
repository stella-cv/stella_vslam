box:
  id: ghcr.io/ymd-stella/openvslam-community/openvslam-desktop:latest

no-response-timeout: 20

clang_format:
  steps:
    - script:
      name: apply clang-format
      code: |
        DIRS_TO_EXCLUDE=".git 3rd cmake docs build .idea cmake-build-debug cmake-build-release"
        for DIR in ${DIRS_TO_EXCLUDE}; do
          EXCLUDE_CMD="${EXCLUDE_CMD} -type d -name ${DIR} -prune -o"
        done
        FILES=$(find . ${EXCLUDE_CMD} -type f -regex ".*\.\(c\|h\|cc\|hh\|cpp\|hpp\)" -print)
        for FILE in ${FILES}; do
          RET=$(diff ${FILE} <(clang-format-6.0 -style=file ${FILE}) 2>&1 || true)
          if [ -n "${RET}" ]; then
            FILES_TO_FORMAT="${FILES_TO_FORMAT} ${FILE}"
          fi
        done
    - script:
      name: check clang-format necessity
      code: |
        if [ -n "${FILES_TO_FORMAT}" ]; then
          echo "Please apply clang-format to following files:"
          for FILE in ${FILES_TO_FORMAT}; do echo "* ${FILE}"; done
          exit 1
        fi
        echo "There is no file which needs clang-format"

build_with_gui:
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: cmake and make with pangolin viewer
      code: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON -DUSE_PANGOLIN_VIEWER=ON -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON ..
        make -j $(($(nproc) / 2))
    - script:
      name: cmake and make with socket publisher
      code: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON -DUSE_SOCKET_PUBLISHER=ON -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON ..
        make -j $(($(nproc) / 2))

build_without_gui:
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: cmake and make
      code: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=ON -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON -DUSE_SSE_ORB=ON ..
        make -j $(($(nproc) / 2))
    - script:
      name: unit test
      code: |
        cd build
        ctest -V
    - script:
      name: Convert groundtruth to TUM format (data.tum)
      code: |
        cd build
        python3 ../scripts/dataset_tools/compute_euroc_cam_tf.py > tf.json
        evo_traj euroc --transform_right tf.json /datasets/EuRoC/MH_04/state_groundtruth_estimate0/data.csv --save_as_tum
    - script:
      name: SLAM test (monocular) with EuRoC MAV dataset
      code: |
        cd build
        ./run_euroc_slam -v /datasets/orb_vocab/orb_vocab.dbow2 -d /datasets/EuRoC/MH_04 -c ../example/euroc/EuRoC_mono.yaml --frame-skip 2 --no-sleep --debug --eval-log --map-db euroc_mono.msg
        evo_rpe tum data.tum frame_trajectory.txt -as
    - script:
      name: SLAM test (stereo) with EuRoC MAV dataset
      code: |
        cd build
        ./run_euroc_slam -v /datasets/orb_vocab/orb_vocab.dbow2 -d /datasets/EuRoC/MH_04 -c ../example/euroc/EuRoC_stereo.yaml --frame-skip 2 --no-sleep --debug --eval-log --map-db euroc_stereo.msg
        evo_rpe tum data.tum frame_trajectory.txt -a

build_without_gui_fbow:
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: cmake and make
      code: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=ON -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=FBoW -DBUILD_TESTS=ON -DUSE_SSE_ORB=ON ..
        make -j $(($(nproc) / 2))
    - script:
      name: unit test
      code: |
        cd build
        ctest -V
    - script:
      name: Convert groundtruth to TUM format (data.tum)
      code: |
        cd build
        python3 ../scripts/dataset_tools/compute_euroc_cam_tf.py > tf.json
        evo_traj euroc --transform_right tf.json /datasets/EuRoC/MH_04/state_groundtruth_estimate0/data.csv --save_as_tum
    - script:
      name: SLAM test (monocular) with EuRoC MAV dataset
      code: |
        cd build
        ./run_euroc_slam -v /datasets/orb_vocab/orb_vocab.fbow -d /datasets/EuRoC/MH_04 -c ../example/euroc/EuRoC_mono.yaml --frame-skip 2 --no-sleep --debug --eval-log --map-db euroc_mono.msg
        evo_rpe tum data.tum frame_trajectory.txt -as
    - script:
      name: Localization test (monocular) with EuRoC MAV dataset
      code: |
        cd build
        ./run_euroc_localization -v /datasets/orb_vocab/orb_vocab.fbow -d /datasets/EuRoC/MH_04 -c ../example/euroc/EuRoC_mono.yaml --frame-skip 2 --no-sleep --debug --eval-log --map-db euroc_mono.msg
        evo_rpe tum data.tum frame_trajectory.txt -as

build_tutorial:
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: cmake and make
      code: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON -DUSE_OPENMP=OFF ..
        make -j $(($(nproc) / 2))
    - script:
      name: download a dataset
      code: |
        cd build
        FILE_ID="1TXjREzkht3iRz__qVx4oYRW1GXsv37ct"
        curl -sc /tmp/cookie "https://drive.google.com/uc?export=download&id=${FILE_ID}" > /dev/null
        CODE="$(awk '/_warning_/ {print $NF}' /tmp/cookie)"
        curl -sLb /tmp/cookie "https://drive.google.com/uc?export=download&confirm=${CODE}&id=${FILE_ID}" -o video_for_ci_1.zip
        unzip video_for_ci_1.zip
        rm video_for_ci_1.zip
    - script:
      name: mapping test with the tutorial
      code: |
        cd build
        ./run_video_slam -v /datasets/orb_vocab/orb_vocab.dbow2 -m ./video_for_ci_1/video.mp4 -c ./video_for_ci_1/config.yaml --frame-skip 3 --no-sleep --debug --eval-log --map-db map.msg
    - script:
      name: localization test with the tutorial
      code: |
        cd build
        ./run_video_localization -v /datasets/orb_vocab/orb_vocab.dbow2 -m ./video_for_ci_1/video.mp4 -c ./video_for_ci_1/config.yaml --frame-skip 3 --no-sleep --debug --eval-log --map-db map.msg

build_ros:
  box: ghcr.io/ymd-stella/openvslam-community/openvslam-ros:latest
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: cmake and make and install
      code: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON -DUSE_SSE_ORB=ON ..
        make -j $(($(nproc) / 2))
        make install
    - script:
      name: build ros packages
      code: |
        cd ros/1
        catkin_make -j$(($(nproc) / 2)) -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2
    - script:
      name: run run_slam
      code: |
        source ros/1/devel/setup.bash
        roscore&
        rosrun openvslam run_slam -v /datasets/orb_vocab/orb_vocab.dbow2 -c example/euroc/EuRoC_mono.yaml --map-db map.msg /camera/image_raw:=/cam0/image_raw&
        rosbag play /datasets/EuRoC/MH_04_difficult.bag
        pkill -SIGINT -f run_slam
        pkill -SIGINT roscore
    - script:
      name: run run_localization
      code: |
        source ros/1/devel/setup.bash
        roscore&
        rosrun openvslam run_localization -v /datasets/orb_vocab/orb_vocab.dbow2 -c example/euroc/EuRoC_mono.yaml --map-db map.msg /camera/image_raw:=/cam0/image_raw&
        sleep 5
        rosbag play /datasets/EuRoC/MH_04_difficult.bag
        pkill -SIGINT -f run_localization
        pkill -SIGINT roscore

build_ros2:
  box: ghcr.io/ymd-stella/openvslam-community/openvslam-ros2:latest
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: cmake and make and install
      code: |
        mkdir build
        cd build
        CMAKE_PREFIX_PATH=/opt/ros/${ROS_DISTRO}/lib/cmake cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON -DUSE_SSE_ORB=ON ..
        make -j $(($(nproc) / 2))
        make install
    - script:
      name: build ros2 packages
      code: |
        cd ros/2
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && colcon build --parallel-workers $(($(nproc) / 2)) --cmake-args -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2)
    - script:
      name: run run_slam
      code: |
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && source ros/2/install/setup.bash && ros2 run openvslam run_slam -v /datasets/orb_vocab/orb_vocab.dbow2 -c example/euroc/EuRoC_mono.yaml --map-db map.msg --ros-args -r /camera/image_raw:=/cam0/image_raw)&
        (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
        sleep 1
        echo "pkill -SIGINT -f run_slam"
        pkill -SIGINT -f run_slam
        sleep 10
    - script:
      name: run run_localization
      code: |
        (source /opt/ros/${ROS2_DISTRO}/setup.bash && source ros/2/install/setup.bash && ros2 run openvslam run_localization -v /datasets/orb_vocab/orb_vocab.dbow2 -c example/euroc/EuRoC_mono.yaml --map-db map.msg --ros-args -r /camera/image_raw:=/cam0/image_raw)&
        sleep 5
        (source /opt/ros/${ROS1_DISTRO}/setup.bash && source /opt/ros/${ROS2_DISTRO}/setup.bash && ros2 bag play -s rosbag_v2 /datasets/EuRoC/MH_04_difficult.bag)
        pkill -SIGINT -f run_localization
